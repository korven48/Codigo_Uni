int main()
{
   tPlayers players;
   tSpaces lane1, lane2;
   tColor playerTurn;
   bool forcedMove = false, passTurn = true, end = false, played;
   int rolled, reward = false, next, marker, sixes = 0, lastMarkerMoved;

   initColors();
   initialize(players, playerTurn, lane1, lane2);
   if (Debug)
      load(players, playerTurn, lane1, lane2);
   display(players, lane1, lane2);

   setColor(playerTurn);
   cout << "The " << colorToString(playerTurn) << " player starts" << endl;
   while (!end)
   {
      played = false;
      setColor(playerTurn);
      cout << "Turn for the " << colorToString(playerTurn) << " player" << endl;

      rolled = dice();
      cin.get();
      cout << "A " << rolled << " is rolled" << endl;
      if (rolled == 5){
         played = process5(players, playerTurn, reward, passTurn, lane1, lane2); 
         if (played)
            cout << "A marker gets out of home (reward: " << reward << ", passTurn: " << passTurn << ")" << endl;
         else
            cout << "No marker can get out of home" << endl;
      }
      if (!played){
         bool possibleMove = false;
         for (int m = 0; m < NUM_MARKERS ; m++) {
            cout << m + 1 << ": ";
            if (canMove(players, m, next, playerTurn, rolled, lane1, lane2)){
               cout << "Can go to the space " << next << endl;
               possibleMove = true;
            }
            else
               cout << "Can not be moved" << endl;
         }
         if (possibleMove){
            cout << "Marker to move: ";
            cin >> marker;
            cin.get();
            marker--;
            if (canMove(players, marker, next, playerTurn, rolled, lane1, lane2)){
               move(players, playerTurn, marker, next, reward, lane1, lane2);
               cout << "Reward: " << reward << endl;
            }
         }
      }
      if (rolled == 0)
         end = true;
      if (passTurn)
         playerTurn = tColor((int(playerTurn) + 1) % NUM_PLAYERS);
      else
         passTurn = true;
      pause();
      display(players, lane1, lane2);
   }

   return 0;
}